FROM microsoft/aspnetcore-build:2.0

# set up OmniSharp
RUN mkdir -p /dependencies/omnisharp/1.29.0-beta1
RUN mkdir -p /dependencies/omnisharp/ca-2.9
RUN curl -SL https://github.com/OmniSharp/omnisharp-roslyn/releases/download/v1.29.0-beta1/omnisharp-linux-x64.tar.gz | tar xvz -C /dependencies/omnisharp/1.29.0-beta1
RUN curl -SL https://github.com/OmniSharp/omnisharp-roslyn/releases/download/ca-2.9/omnisharp-linux-x64.tar.gz | tar xvz -C /dependencies/omnisharp/ca-2.9
ENV TRYDOTNET_OMNISHARP_PATH=/dependencies/omnisharp/
ENV NUGET_PACKAGES=/root/.nuget/packages/

# install xmlstarlet
RUN apt-get update
RUN apt-get --assume-yes install xmlstarlet

# set up workspaces directory
ENV TRYDOTNET_WORKSPACES_PATH=/workspaces

# set up workspaces
WORKDIR /workspaces/console
RUN dotnet new console
RUN xmlstarlet ed --inplace --insert "/Project/PropertyGroup/OutputType" --type elem -n "LangVersion" --value "7.2" console.csproj
RUN dotnet add package Newtonsoft.Json
RUN dotnet build

WORKDIR /workspaces/nodatime.api
RUN dotnet new console
RUN xmlstarlet ed --inplace --insert "/Project/PropertyGroup/OutputType" --type elem -n "LangVersion" --value "7.2" nodatime.api.csproj
RUN dotnet add package Newtonsoft.Json
RUN dotnet add package NodaTime
RUN dotnet add package NodaTime.Testing
RUN dotnet build

WORKDIR /workspaces/aspnet.webapi
RUN dotnet new webapi
RUN xmlstarlet ed --inplace --insert "/Project/PropertyGroup/OutputType" --type elem -n "LangVersion" --value "7.2" aspnet.webapi.csproj
RUN dotnet build
RUN dotnet publish

# hack to get the emit plugin into the package cache
WORKDIR /workspaces/emit
RUN dotnet new library
# dotnet objects to trying to add this package, so we use some coercion and return true in order to prevent the resulting error from stopping the Docker build
RUN sed -i 's/netstandard2.0/net46/' emit.csproj
RUN dotnet add package -v 1.29.0-beta2 trydotnet.omnisharp.emit ; true
